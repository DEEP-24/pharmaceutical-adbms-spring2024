generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String @map("name")
  email        String @unique
  passwordHash String @map("password_hash")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model Pharmacist {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String @map("name")
  email        String @unique
  passwordHash String @map("password_hash")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pharmacist")
}

model Doctor {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @map("name")
  email        String        @unique
  passwordHash String        @map("password_hash")
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor")
}

model Patient {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @map("name")
  email        String?       @unique
  passwordHash String?       @map("password_hash")
  gender       Gender
  dob          DateTime      @map("date_of_birth")
  phone        String        @unique
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient")
}

model Medication {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  brand         String
  dosage        String
  name          String
  price         Float
  quantity      Int
  unit          String
  prescriptions Prescription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medication")
}

model Appointment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  purpose       PurposeOfVisit
  conditions    String[]
  prescriptions Prescription[]
  patient       Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patientId     String         @map("patient_id") @db.ObjectId
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  doctorId      String         @map("doctor_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointment")
}

model Prescription {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  dosage           Int
  durationNumber   Int
  durationUnit     String
  frequency        String
  frequencyTimings Int[]
  remarks          String?
  timing           String
  unit             String
  appointment      Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId    String      @map("appointment_id") @db.ObjectId
  medication       Medication  @relation(fields: [medicationId], references: [id])
  medicationId     String      @map("medication_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([appointmentId, medicationId], name: "appointmentMedicationIndex")
  @@map("prescription")
}

enum PurposeOfVisit {
  CONSULTATION
  LAB
  PHARMACY
}

enum MedicationUnit {
  CAPSULE
  DROP
  G
  IU
  L
  MCG
  MEQ
  MG
  ML
  MMOL
  PERCENT
  PILL
  TABLET
  UNIT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
